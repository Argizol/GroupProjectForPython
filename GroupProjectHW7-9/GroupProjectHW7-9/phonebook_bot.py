import telebot
from telebot import types
import ReadCommand
import AddCommand
import logger as Log
import DeleteCommand as Delete
import ImportFile as Import
import ExportFile as Export
import EditCommand as Edit
import re
from Contacts import data

# name for your bot - phonebook_bot
# username for your bot - python_phonebook_bot

name = ''
surname = ''
phonenumber = 0
user_choice = 0
filtered_list = []
user_for_commands = []
new_data = ''

TOKEN = '5702651173:AAEhqZS4TNEXRaUV6dJeW9K4OnuN8KZ-iZs'

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    import_from_file = types.KeyboardButton('–ò–º–ø–æ—Ä—Ç')
    export_contacts = types.KeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç')
    read_phone_book = types.KeyboardButton('–í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞ —ç–∫—Ä–∞–Ω')
    find_contact = types.KeyboardButton('–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç')
    add_contact = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')
    delete_contact = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')
    change_contact = types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')

    markup.add(read_phone_book, find_contact, add_contact, delete_contact, change_contact, import_from_file,
               export_contacts)

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!'.format(message.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == '–í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞ —ç–∫—Ä–∞–Ω':
            if len(data) == 0:
                bot.send_message(message.from_user.id, f'–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—É—Å—Ç.')
            count = 0
            for i, j in sorted(data.items()):
                count += 1
                bot.send_message(message.from_user.id,f'{count}. {i} {j}')
        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç':
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ')
            bot.register_next_step_handler(message, get_name)
        elif message.text == '–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç':
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è/—Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏: ')
            bot.register_next_step_handler(message, find_contact_bot)
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç':
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è/—Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ')
            bot.register_next_step_handler(message, delete)
        elif message.text == '–ò–º–ø–æ—Ä—Ç':
            Import.import_from_file()
            bot.send_message(message.from_user.id, f'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(data)}')
        elif message.text == '–≠–∫—Å–ø–æ—Ä—Ç':
            Export.export_contacts(data)
            bot.send_message(message.from_user.id, f'–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª')
        elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç':
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
            bot.register_next_step_handler(message, edit)


def edit(message):
    global data
    global filtered_list
    null_data(message)
    count = 0
    for name, phone in data.items():
        if (message.text.lower() in name.lower()) or (message.text.lower() in phone.lower()):
            filtered_list.append(f'{name},{phone}')
            count += 1
            bot.send_message(message.from_user.id, f'{count}. {filtered_list[count - 1]}')
    if len(filtered_list) == 1:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        bot.register_next_step_handler(message, get_new_data, filtered_list[0].split(','))
    elif len(filtered_list) > 1:
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É –≤ —Å–ø–∏—Å–∫–µ: ')
        bot.register_next_step_handler(message, get_data_for_edit, filtered_list)
    else:
        bot.send_message(message.from_user.id, f'–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')


def null_data(message):
    if len(data) == 0:
        bot.send_message(message.from_user.id, f'–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')


def get_data_for_edit(message, filtered_list):
    global user_choice
    global user_for_commands
    user_choice = int(message.text)
    user_for_commands = filtered_list[user_choice - 1].split(',')
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    bot.register_next_step_handler(message, get_new_data, user_for_commands)


def get_new_data(message, user_for_commands):
    global new_data
    global filtered_list
    new_data = message.text
    if re.compile("^[0-9\s()+-]*$").match(new_data):
        Edit.bot_change_contact_number(user_for_commands[0], new_data)
        bot.send_message(message.from_user.id, f'–ù–æ–º–µ—Ä –∞–±–æ–Ω–µ–Ω—Ç–∞ {user_for_commands[0]} –∏–∑–º–µ–Ω–µ–Ω. –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {new_data}')
        filtered_list.clear()
    elif re.compile("^[a-zA-Z–ê-–Ø–∞-—è\s]*$").match(new_data):
        Edit.bot_change_contact_name(user_for_commands[0], new_data)
        bot.send_message(message.from_user.id, f'–ò–º—è –∞–±–æ–Ω–µ–Ω—Ç–∞ {user_for_commands[0]} –∏–∑–º–µ–Ω–µ–Ω–æ. –ù–æ–≤–æ–µ –∏–º—è: {new_data}')
        filtered_list.clear()


def delete(message):
    global data
    global filtered_list
    count = 0
    null_data(message)
    for name, phone in data.copy().items():
        if (message.text.lower() in name.lower()) or (message.text.lower() in phone.lower()):
            filtered_list.append(f'{name},{phone}')
            count += 1
            bot.send_message(message.from_user.id, f'{count}. {name}, {phone}')
    if len(filtered_list) > 1:
        bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É –≤ —Å–ø–∏—Å–∫–µ: ')
        bot.register_next_step_handler(message, get_userchoice, filtered_list)
    elif len(filtered_list) == 1:
        user_for_commands = filtered_list[0].split(',')
        Delete.delete_contact(user_for_commands[1])
        bot.send_message(message.from_user.id, f'–£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {filtered_list[0]}')
        filtered_list.clear()
    else:
        bot.send_message(message.from_user.id, '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')


def get_userchoice(message, filtered_list):
    global user_choice
    global user_for_commands
    user_choice = int(message.text)
    user_for_commands = filtered_list[user_choice - 1].split(',')
    Delete.delete_contact(user_for_commands[1])
    bot.send_message(message.from_user.id, f'–£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {filtered_list[user_choice - 1]}')
    filtered_list.clear()


def find_contact_bot(message):
    global data
    global filtered_list
    count = 0
    for name, phone in data.items():
        if (message.text.lower() in name.lower()) or (message.text.lower() in phone.lower()):
            filtered_list.append(f'{name},{phone}')
            count += 1
            filtered_list.append(f'{name},{phone}')
            bot.send_message(message.from_user.id, f'{count}. {name}, {phone}')
            filtered_list.clear()
    if count == 0:
        bot.send_message(message.from_user.id, f'–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')


def get_name(message):
    global name
    name = message.text
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é: ')
    bot.register_next_step_handler(message, get_surname)


def get_surname(message):
    global surname
    surname = message.text
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
    bot.register_next_step_handler(message, get_phonenumber)


def get_phonenumber(message):
    global phonenumber
    phonenumber = message.text

    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
    keyboard.add(yes)
    no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
    keyboard.add(no)

    question = f'–§–∞–º–∏–ª–∏—è –∏ –∏–º—è: {name} {surname}, —Ç–µ–ª–µ—Ñ–æ–Ω {str(phonenumber)}. –í—Å–µ –≤–µ—Ä–Ω–æ?'
    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == 'yes':
        bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!')
        AddCommand.add_bot(name, surname, phonenumber)
    elif call.data == 'no':
        bot.send_message(call.message.chat.id, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò≠\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞')


bot.polling(none_stop=True)
